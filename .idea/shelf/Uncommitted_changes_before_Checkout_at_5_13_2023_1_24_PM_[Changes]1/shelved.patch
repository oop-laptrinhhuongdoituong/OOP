Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module com.example.baitaplonoop {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n    requires com.microsoft.sqlserver.jdbc;\r\n    requires java.naming;\r\n    requires java.sql;\r\n    requires org.apache.poi.ooxml.schemas;\r\n    requires org.apache.xmlbeans;\r\n    requires org.apache.poi.ooxml;\r\n    requires org.apache.poi.poi;\r\n    requires org.apache.logging.log4j;\r\n    requires java.desktop;\r\n\r\n    opens com.example.baitaplonoop to javafx.fxml;\r\n    exports com.example.baitaplonoop;\r\n    exports com.example.baitaplonoop.controller;\r\n    opens com.example.baitaplonoop.controller to javafx.fxml;\r\n    exports com.example.baitaplonoop.model;\r\n    opens com.example.baitaplonoop.model to javafx.fxml;\r\n    exports com.example.baitaplonoop.sql;\r\n    opens com.example.baitaplonoop.sql to javafx.fxml;\r\n    exports com.example.baitaplonoop.util;\r\n    opens com.example.baitaplonoop.util to javafx.fxml;\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	
+++ b/src/main/java/module-info.java	
@@ -10,6 +10,7 @@
     requires org.apache.poi.poi;
     requires org.apache.logging.log4j;
     requires java.desktop;
+    requires de.jensd.fx.glyphs.fontawesome;
 
     opens com.example.baitaplonoop to javafx.fxml;
     exports com.example.baitaplonoop;
Index: src/main/java/com/example/baitaplonoop/sql/DBConnect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.baitaplonoop.sql;\r\n\r\nimport java.sql.*;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\npublic class DBConnect {\r\n    public Connection con;\r\n\r\n    public DBConnect() {\r\n        try {\r\n            Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\r\n            String url = \"jdbc:sqlserver://DESKTOP-AP629KT\\\\SQLEXPRESS:1433;databaseName=Exam_Management2;\"\r\n                    + \"encrypt=true;trustServerCertificate=true;sslProtocol=TLSv1.2\";\r\n            String username = \"sa\";\r\n            String password = \"hoangphuc0703\";\r\n            con = DriverManager.getConnection(url, username, password);\r\n        } catch (ClassNotFoundException | SQLException ex) {\r\n            Logger.getLogger(DBConnect.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n\r\n    public ResultSet getData(String stringSQL){\r\n        ResultSet rs = null;\r\n        try {\r\n            Statement state = con.createStatement();\r\n            rs = state.executeQuery(stringSQL);\r\n        } catch (SQLException ex) {\r\n            Logger.getLogger(DBConnect.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n        return rs;\r\n    }\r\n\r\n    public int InsertQuestion(String[] stringSQL, byte[] pic){\r\n        int rowInserted = 0;\r\n        String sql = \"INSERT INTO Question(categoryID, questionID, questionText, questionMark, questionImage) values(?,?,?,?,?)\";\r\n        PreparedStatement statement;\r\n        try{\r\n            statement = con.prepareStatement(sql);\r\n            statement.setString(1, stringSQL[0]);\r\n            statement.setString(2, stringSQL[1]);\r\n            statement.setString(3, stringSQL[2]);\r\n            statement.setString(4, stringSQL[3]);\r\n            statement.setBytes(5, pic);\r\n            rowInserted = statement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return rowInserted;\r\n    }\r\n\r\n    public int InsertQuestion(String[] stringSQL){\r\n        int rowInserted = 0;\r\n        String sql = \"INSERT INTO Question(categoryID, questionID, questionText) values(?,?,?)\";\r\n        PreparedStatement statement;\r\n        try{\r\n            statement = con.prepareStatement(sql);\r\n            statement.setString(1, stringSQL[0]);\r\n            statement.setString(2, stringSQL[1]);\r\n            statement.setString(3, stringSQL[2]);\r\n            rowInserted = statement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return rowInserted;\r\n    }\r\n\r\n    public int InsertChoice(String[] stringSQL){\r\n        int rowInserted = 0;\r\n        String sql = \"INSERT INTO Choice(choiceText, choiceGrade, choiceID, questionID, isSelected) values(?,?,?,?,?)\";\r\n        PreparedStatement statement;\r\n        try{\r\n            statement = con.prepareStatement(sql);\r\n            statement.setString(1, stringSQL[0]);\r\n            statement.setFloat(2, Float.parseFloat(stringSQL[1]));\r\n            statement.setString(3, stringSQL[2]);\r\n            statement.setString(4, stringSQL[3]);\r\n            statement.setString(5, stringSQL[4]);\r\n            rowInserted = statement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return rowInserted;\r\n    }\r\n\r\n    public String FindCategoryID(String categoryName) throws SQLException {\r\n        String categoryID = null;\r\n        String sql = \"SELECT categoryID FROM Category WHERE categoryName = N'\" + categoryName + \"'\";\r\n//        PreparedStatement statement = con.prepareStatement(sql);\r\n//        statement.setString(1, categoryName);\r\n        ResultSet result = getData(sql);\r\n\r\n        // Nếu tìm thấy categoryName, lấy categoryID từ kết quả truy vấn\r\n        if (result.next()) {\r\n            categoryID = result.getString(\"categoryID\");\r\n        }\r\n\r\n        // Đóng kết nối và trả về categoryID\r\n\r\n        return categoryID;\r\n    }\r\n\r\n\r\n    public int InsertCategory(String[] stringSQL){\r\n        int rowInserted = 0;\r\n        String sql = \"INSERT INTO Category(parentID, categoryName, categoryID, categoryinfo) values (?, ?, ?, ?)\";\r\n        PreparedStatement statement;\r\n        try{\r\n            statement = con.prepareStatement(sql);\r\n            statement.setString(1, stringSQL[0]);\r\n            statement.setString(2, stringSQL[1]);\r\n            statement.setString(3, stringSQL[2]);\r\n            statement.setString(4, stringSQL[3]);\r\n            rowInserted = statement.executeUpdate();\r\n        } catch (SQLException e){throw new RuntimeException(e);}\r\n        return rowInserted;\r\n    }\r\n\r\n}\r\n//
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/baitaplonoop/sql/DBConnect.java b/src/main/java/com/example/baitaplonoop/sql/DBConnect.java
--- a/src/main/java/com/example/baitaplonoop/sql/DBConnect.java	
+++ b/src/main/java/com/example/baitaplonoop/sql/DBConnect.java	
@@ -10,10 +10,10 @@
     public DBConnect() {
         try {
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
-            String url = "jdbc:sqlserver://DESKTOP-AP629KT\\SQLEXPRESS:1433;databaseName=Exam_Management2;"
+            String url = "jdbc:sqlserver://Dat\\MSSQLSERVER01:1433;databaseName=Exam_Management2;"
                     + "encrypt=true;trustServerCertificate=true;sslProtocol=TLSv1.2";
             String username = "sa";
-            String password = "hoangphuc0703";
+            String password = "123";
             con = DriverManager.getConnection(url, username, password);
         } catch (ClassNotFoundException | SQLException ex) {
             Logger.getLogger(DBConnect.class.getName()).log(Level.SEVERE, null, ex);
Index: src/main/java/com/example/baitaplonoop/controller/GUI21Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.baitaplonoop.controller;\r\n\r\nimport com.example.baitaplonoop.sql.DBConnect;\r\nimport com.example.baitaplonoop.util.addQuestion;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.ResultSet;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class GUI21Controller implements Initializable {\r\n    @FXML\r\n    private ToolBar toolBar;\r\n\r\n    @FXML\r\n    private ToggleButton exportButton;\r\n    @FXML\r\n    private ToggleButton importButton;\r\n    @FXML\r\n    private ToggleButton questionsButton;\r\n    @FXML\r\n    private ToggleButton categoriesButton;\r\n    @FXML\r\n    private AnchorPane gui2_1;\r\n    @FXML\r\n    private TableView<addQuestion> table;\r\n\r\n    @FXML\r\n    private TableColumn<addQuestion, String> question;\r\n\r\n    @FXML\r\n    private TableColumn<addQuestion, Button> action;\r\n    private ObservableList<addQuestion> questionsList = FXCollections.observableArrayList();\r\n    ;\r\n    @FXML\r\n    private Label Default;\r\n    @FXML\r\n    private TreeView<String> category;\r\n    @FXML\r\n    private CheckBox gui2_1CheckBox;\r\n\r\n    DBConnect db = new DBConnect();\r\n    //insert category into the TreeView\r\n    void insertCategory(String query1,TreeItem<String> root) throws Exception {\r\n        ResultSet rs1 = db.getData(query1);\r\n        try {\r\n            while (rs1.next()) {\r\n                String childrenCategory = rs1.getString(\"categoryName\");\r\n                String numberQuestions;\r\n                ResultSet rs2=db.getData((\"select count(*) as cnt from dbo.Category as c,dbo.Question as q where q.categoryID=c.categoryID and c.categoryName= N'\")+ childrenCategory+\"'\");\r\n                rs2.next();\r\n                String childrenCategory1;\r\n                numberQuestions=Integer.toString(rs2.getInt(\"cnt\"));\r\n                if(numberQuestions.equals(\"0\")==false){\r\n                childrenCategory1=childrenCategory+\"(\"+numberQuestions+\")\";}\r\n                else {\r\n                    childrenCategory1=childrenCategory;\r\n                }\r\n                TreeItem<String> item = new TreeItem<>(childrenCategory1);\r\n                String a = \"Select * from dbo.Category where parentID = N'\" + rs1.getString(\"categoryID\") + \"'\";\r\n                insertCategory(a, item);\r\n                root.getChildren().add(item);\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            throw new Exception(e);\r\n        }\r\n    }\r\n    //Add questions to the table if you also add questions of subcategories\r\n    public void insertQuestionIntoTableViewWithSubcategory(TreeItem<String> item){\r\n        String questionView=\"select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'\"+findCategoryName(item.getValue())+\"'\";\r\n        ResultSet rs1=db.getData(questionView);\r\n        try {\r\n            while (rs1.next()){\r\n                addQuestion question1=new addQuestion(rs1.getString(\"categoryID\"),rs1.getString(\"questionID\"),rs1.getString(\"questionText\"),rs1.getString(\"questionImage\"),rs1.getDouble(\"questionMark\"),new Button(\"Edit\"));\r\n                questionsList.add(question1);\r\n            }\r\n        }catch (Exception e){\r\n            throw new RuntimeException(e);\r\n        }\r\n        if(item.isLeaf()==false){\r\n            for(TreeItem<String> subItem : item.getChildren()){\r\n                insertQuestionIntoTableViewWithSubcategory(subItem);\r\n            }\r\n        }\r\n    }\r\n    // check mouse on Label\r\n    private boolean isMouseOnLabel(Label label, MouseEvent event) {\r\n        Bounds bounds = label.getBoundsInParent();\r\n        double mouseX = event.getSceneX();\r\n        double mouseY = event.getSceneY();\r\n        return bounds.contains(mouseX, mouseY);\r\n    }\r\n    //find Name of category from treeView\r\n    private String findCategoryName(String a){\r\n        int n=a.length()-1;\r\n        int i=n-1;\r\n        if(a.charAt(n)!=')')return a;\r\n        while(a.charAt(i)!='('&&i>=0){\r\n            if(a.charAt(i)<'0'||a.charAt(i)>'9')return a;\r\n            i--;\r\n        }\r\n        return a.substring(0,i);\r\n    }\r\n    //create click event for treeView\r\n    private void showQuestionInCaseShowQuestionOfSubcategories(){\r\n        category.setOnMouseClicked(mouseEvent -> {\r\n\r\n            if(mouseEvent.getClickCount()==3){\r\n                questionsList.clear();\r\n                table.setItems(questionsList);\r\n                TreeItem<String> item=category.getSelectionModel().getSelectedItem();\r\n                insertQuestionIntoTableViewWithSubcategory(item);\r\n                category.setVisible(false);\r\n                Default.setText(findCategoryName(item.getValue()));\r\n                question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>(\"questionText\"));\r\n                action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>(\"button\"));\r\n                table.setItems(questionsList);\r\n                table.setVisible(true);\r\n            }\r\n        });\r\n        category.setOnKeyPressed(keyEvent -> {\r\n            if(keyEvent.getCode()== KeyCode.ENTER ){\r\n                questionsList.clear();\r\n                table.setItems(questionsList);\r\n                TreeItem<String> item=category.getSelectionModel().getSelectedItem();\r\n                insertQuestionIntoTableViewWithSubcategory(item);\r\n                category.setVisible(false);\r\n                Default.setText(findCategoryName(item.getValue()));\r\n                question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>(\"questionText\"));\r\n                action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>(\"button\"));\r\n                table.setItems(questionsList);\r\n                table.setVisible(true);\r\n            }\r\n        });\r\n    }\r\n    private void showQuestionsOfCategoryWithoutSubcategories(){\r\n        category.setOnMouseClicked(mouseEvent -> {\r\n            if(mouseEvent.getClickCount()==3){\r\n                questionsList.clear();\r\n                table.setItems(questionsList);\r\n                TreeItem<String> item=category.getSelectionModel().getSelectedItem();\r\n                category.setVisible(false);\r\n                Default.setText(findCategoryName(item.getValue()));\r\n                String categoryName=findCategoryName(item.getValue());\r\n                String questionView=\"select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'\"+categoryName+\"'\";\r\n                ResultSet rs1=db.getData(questionView);\r\n                try {\r\n                    while (rs1.next()){\r\n                        addQuestion question1=new addQuestion(rs1.getString(\"categoryID\"),rs1.getString(\"questionID\"),rs1.getString(\"questionText\"),rs1.getString(\"questionImage\"),rs1.getDouble(\"questionMark\"),new Button(\"Edit\"));\r\n                        questionsList.add(question1);\r\n                    }\r\n                    question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>(\"questionText\"));\r\n                    action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>(\"button\"));\r\n                    table.setItems(questionsList);\r\n                    table.setVisible(true);\r\n                }catch (Exception e){\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n        });\r\n        category.setOnKeyPressed(keyEvent -> {\r\n            if(keyEvent.getCode()== KeyCode.ENTER){\r\n                questionsList.clear();\r\n                table.setItems(questionsList);\r\n                TreeItem<String> item=category.getSelectionModel().getSelectedItem();\r\n                category.setVisible(false);\r\n                String questionView=\"select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'\"+findCategoryName(item.getValue())+\"'\";\r\n                ResultSet rs1=db.getData(questionView);\r\n                Default.setText(findCategoryName(item.getValue()));\r\n                try {\r\n                    while (rs1.next()){\r\n                        addQuestion question1=new addQuestion(rs1.getString(\"categoryID\"),rs1.getString(\"questionID\"),rs1.getString(\"questionText\"),rs1.getString(\"questionImage\"),rs1.getDouble(\"questionMark\"),new Button(\"Edit\"));\r\n                        questionsList.add(question1);\r\n                    }\r\n                    question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>(\"questionText\"));\r\n                    action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>(\"button\"));\r\n                    table.setItems(questionsList);\r\n                    table.setVisible(true);\r\n                }catch (Exception e){\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resourceBundle) {\r\n        category.setVisible(false);\r\n        table.setVisible(false);\r\n        Default.setOnMouseClicked(mouseEvent -> {\r\n            Default.setText(\"Default\");\r\n\r\n            TreeItem<String> root = new TreeItem<>(\"For IT\");\r\n            try {\r\n                insertCategory(\"select * from dbo.Category where parentID is NULL\", root);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n            category.setRoot(root);\r\n            category.setVisible(true);\r\n        });\r\n        gui2_1CheckBox.setSelected(false);\r\n        if (gui2_1CheckBox.isSelected()) {\r\n            showQuestionInCaseShowQuestionOfSubcategories();\r\n        }\r\n        else {\r\n            showQuestionsOfCategoryWithoutSubcategories();\r\n        }\r\n        gui2_1CheckBox.setOnAction(event -> {\r\n            if (gui2_1CheckBox.isSelected()) {\r\n              showQuestionInCaseShowQuestionOfSubcategories();\r\n            }\r\n            else {\r\n                showQuestionsOfCategoryWithoutSubcategories();\r\n            }\r\n        });\r\n        gui2_1.setOnMouseClicked(mouseEvent -> {\r\n            if(category.isVisible()&& isMouseOnLabel(Default,mouseEvent)==false)category.setVisible(false);\r\n        });\r\n        categoriesButton.setOnAction(e -> {\r\n            Stage stage = (Stage)((Node) e.getSource()).getScene().getWindow();\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(getClass().getResource(\"/com/example/baitaplonoop/GUI33AddCategory.fxml\"));\r\n            try {\r\n                Parent GUI33AddCategory=loader.load();\r\n                Scene scene=new Scene(GUI33AddCategory);\r\n                stage.setScene(scene);\r\n            } catch (IOException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n\r\n        });\r\n      importButton.setOnAction(e -> {\r\n            Stage stage = (Stage)((Node) e.getSource()).getScene().getWindow();\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(getClass().getResource(\"/com/example/baitaplonoop/GUI34.fxml\"));\r\n            try {\r\n                Parent GUI33AddCategory=loader.load();\r\n                Scene scene=new Scene(GUI33AddCategory);\r\n                stage.setScene(scene);\r\n            } catch (IOException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/baitaplonoop/controller/GUI21Controller.java b/src/main/java/com/example/baitaplonoop/controller/GUI21Controller.java
--- a/src/main/java/com/example/baitaplonoop/controller/GUI21Controller.java	
+++ b/src/main/java/com/example/baitaplonoop/controller/GUI21Controller.java	
@@ -2,6 +2,8 @@
 
 import com.example.baitaplonoop.sql.DBConnect;
 import com.example.baitaplonoop.util.addQuestion;
+import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
+import de.jensd.fx.glyphs.fontawesome.FontAwesomeIconView;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.fxml.FXML;
@@ -13,14 +15,18 @@
 import javafx.scene.Scene;
 import javafx.scene.control.*;
 import javafx.scene.control.cell.PropertyValueFactory;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
 import javafx.scene.input.KeyCode;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.AnchorPane;
+import javafx.scene.paint.Paint;
 import javafx.stage.Stage;
 
 import java.io.IOException;
 import java.net.URL;
 import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.util.ResourceBundle;
 
 public class GUI21Controller implements Initializable {
@@ -55,21 +61,22 @@
     private CheckBox gui2_1CheckBox;
 
     DBConnect db = new DBConnect();
+
     //insert category into the TreeView
-    void insertCategory(String query1,TreeItem<String> root) throws Exception {
+    void insertCategory(String query1, TreeItem<String> root) throws Exception {
         ResultSet rs1 = db.getData(query1);
         try {
             while (rs1.next()) {
                 String childrenCategory = rs1.getString("categoryName");
                 String numberQuestions;
-                ResultSet rs2=db.getData(("select count(*) as cnt from dbo.Category as c,dbo.Question as q where q.categoryID=c.categoryID and c.categoryName= N'")+ childrenCategory+"'");
+                ResultSet rs2 = db.getData(("select count(*) as cnt from dbo.Category as c,dbo.Question as q where q.categoryID=c.categoryID and c.categoryName= N'") + childrenCategory + "'");
                 rs2.next();
                 String childrenCategory1;
-                numberQuestions=Integer.toString(rs2.getInt("cnt"));
-                if(numberQuestions.equals("0")==false){
-                childrenCategory1=childrenCategory+"("+numberQuestions+")";}
-                else {
-                    childrenCategory1=childrenCategory;
+                numberQuestions = Integer.toString(rs2.getInt("cnt"));
+                if (numberQuestions.equals("0") == false) {
+                    childrenCategory1 = childrenCategory + "(" + numberQuestions + ")";
+                } else {
+                    childrenCategory1 = childrenCategory;
                 }
                 TreeItem<String> item = new TreeItem<>(childrenCategory1);
                 String a = "Select * from dbo.Category where parentID = N'" + rs1.getString("categoryID") + "'";
@@ -82,24 +89,47 @@
             throw new Exception(e);
         }
     }
+
     //Add questions to the table if you also add questions of subcategories
-    public void insertQuestionIntoTableViewWithSubcategory(TreeItem<String> item){
-        String questionView="select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'"+findCategoryName(item.getValue())+"'";
-        ResultSet rs1=db.getData(questionView);
+    public void insertQuestionIntoTableViewWithSubcategory(TreeItem<String> item) {
+        String questionView = "select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'" + findCategoryName(item.getValue()) + "'";
+        ResultSet rs1 = db.getData(questionView);
         try {
-            while (rs1.next()){
-                addQuestion question1=new addQuestion(rs1.getString("categoryID"),rs1.getString("questionID"),rs1.getString("questionText"),rs1.getString("questionImage"),rs1.getDouble("questionMark"),new Button("Edit"));
+            while (rs1.next()) {
+                Button button = new Button("edit");
+                button.setOnAction(event -> {
+                    try {
+                        System.out.println(rs1.getString("questionID"));
+                    } catch (SQLException e) {
+                        throw new RuntimeException(e);
+                    }
+                    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
+                    FXMLLoader loader = new FXMLLoader();
+                    loader.setLocation(getClass().getResource("/com/example/baitaplonoop/GUI34.fxml"));
+                    try {
+                        Parent GUI33AddCategory = loader.load();
+                        Scene scene = new Scene(GUI33AddCategory);
+                        stage.setScene(scene);
+                    } catch (IOException ex) {
+                        throw new RuntimeException(ex);
+                    }
+
+                });
+
+
+                addQuestion question1 = new addQuestion(rs1.getString("categoryID"), rs1.getString("questionID"), rs1.getString("questionText"), rs1.getString("questionImage"), rs1.getDouble("questionMark"), button);
                 questionsList.add(question1);
             }
-        }catch (Exception e){
+        } catch (Exception e) {
             throw new RuntimeException(e);
         }
-        if(item.isLeaf()==false){
-            for(TreeItem<String> subItem : item.getChildren()){
+        if (item.isLeaf() == false) {
+            for (TreeItem<String> subItem : item.getChildren()) {
                 insertQuestionIntoTableViewWithSubcategory(subItem);
             }
         }
     }
+
     // check mouse on Label
     private boolean isMouseOnLabel(Label label, MouseEvent event) {
         Bounds bounds = label.getBoundsInParent();
@@ -107,93 +137,96 @@
         double mouseY = event.getSceneY();
         return bounds.contains(mouseX, mouseY);
     }
+
     //find Name of category from treeView
-    private String findCategoryName(String a){
-        int n=a.length()-1;
-        int i=n-1;
-        if(a.charAt(n)!=')')return a;
-        while(a.charAt(i)!='('&&i>=0){
-            if(a.charAt(i)<'0'||a.charAt(i)>'9')return a;
+    private String findCategoryName(String a) {
+        int n = a.length() - 1;
+        int i = n - 1;
+        if (a.charAt(n) != ')') return a;
+        while (a.charAt(i) != '(' && i >= 0) {
+            if (a.charAt(i) < '0' || a.charAt(i) > '9') return a;
             i--;
         }
-        return a.substring(0,i);
+        return a.substring(0, i);
     }
+
     //create click event for treeView
-    private void showQuestionInCaseShowQuestionOfSubcategories(){
+    private void showQuestionInCaseShowQuestionOfSubcategories() {
         category.setOnMouseClicked(mouseEvent -> {
 
-            if(mouseEvent.getClickCount()==3){
+            if (mouseEvent.getClickCount() == 3) {
                 questionsList.clear();
                 table.setItems(questionsList);
-                TreeItem<String> item=category.getSelectionModel().getSelectedItem();
+                TreeItem<String> item = category.getSelectionModel().getSelectedItem();
                 insertQuestionIntoTableViewWithSubcategory(item);
                 category.setVisible(false);
                 Default.setText(findCategoryName(item.getValue()));
-                question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>("questionText"));
-                action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>("button"));
+                question.setCellValueFactory(new PropertyValueFactory<addQuestion, String>("questionText"));
+                action.setCellValueFactory(new PropertyValueFactory<addQuestion, Button>("button"));
                 table.setItems(questionsList);
                 table.setVisible(true);
             }
         });
         category.setOnKeyPressed(keyEvent -> {
-            if(keyEvent.getCode()== KeyCode.ENTER ){
+            if (keyEvent.getCode() == KeyCode.ENTER) {
                 questionsList.clear();
                 table.setItems(questionsList);
-                TreeItem<String> item=category.getSelectionModel().getSelectedItem();
+                TreeItem<String> item = category.getSelectionModel().getSelectedItem();
                 insertQuestionIntoTableViewWithSubcategory(item);
                 category.setVisible(false);
                 Default.setText(findCategoryName(item.getValue()));
-                question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>("questionText"));
-                action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>("button"));
+                question.setCellValueFactory(new PropertyValueFactory<addQuestion, String>("questionText"));
+                action.setCellValueFactory(new PropertyValueFactory<addQuestion, Button>("button"));
                 table.setItems(questionsList);
                 table.setVisible(true);
             }
         });
     }
-    private void showQuestionsOfCategoryWithoutSubcategories(){
+
+    private void showQuestionsOfCategoryWithoutSubcategories() {
         category.setOnMouseClicked(mouseEvent -> {
-            if(mouseEvent.getClickCount()==3){
+            if (mouseEvent.getClickCount() == 3) {
                 questionsList.clear();
                 table.setItems(questionsList);
-                TreeItem<String> item=category.getSelectionModel().getSelectedItem();
+                TreeItem<String> item = category.getSelectionModel().getSelectedItem();
                 category.setVisible(false);
                 Default.setText(findCategoryName(item.getValue()));
-                String categoryName=findCategoryName(item.getValue());
-                String questionView="select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'"+categoryName+"'";
-                ResultSet rs1=db.getData(questionView);
+                String categoryName = findCategoryName(item.getValue());
+                String questionView = "select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'" + categoryName + "'";
+                ResultSet rs1 = db.getData(questionView);
                 try {
-                    while (rs1.next()){
-                        addQuestion question1=new addQuestion(rs1.getString("categoryID"),rs1.getString("questionID"),rs1.getString("questionText"),rs1.getString("questionImage"),rs1.getDouble("questionMark"),new Button("Edit"));
+                    while (rs1.next()) {
+                        addQuestion question1 = new addQuestion(rs1.getString("categoryID"), rs1.getString("questionID"), rs1.getString("questionText"), rs1.getString("questionImage"), rs1.getDouble("questionMark"), new Button("Edit"));
                         questionsList.add(question1);
                     }
-                    question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>("questionText"));
-                    action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>("button"));
+                    question.setCellValueFactory(new PropertyValueFactory<addQuestion, String>("questionText"));
+                    action.setCellValueFactory(new PropertyValueFactory<addQuestion, Button>("button"));
                     table.setItems(questionsList);
                     table.setVisible(true);
-                }catch (Exception e){
+                } catch (Exception e) {
                     throw new RuntimeException(e);
                 }
             }
         });
         category.setOnKeyPressed(keyEvent -> {
-            if(keyEvent.getCode()== KeyCode.ENTER){
+            if (keyEvent.getCode() == KeyCode.ENTER) {
                 questionsList.clear();
                 table.setItems(questionsList);
-                TreeItem<String> item=category.getSelectionModel().getSelectedItem();
+                TreeItem<String> item = category.getSelectionModel().getSelectedItem();
                 category.setVisible(false);
-                String questionView="select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'"+findCategoryName(item.getValue())+"'";
-                ResultSet rs1=db.getData(questionView);
+                String questionView = "select *from dbo.Question as q,dbo.Category as c where q.categoryID = c.categoryID and c.categoryName = N'" + findCategoryName(item.getValue()) + "'";
+                ResultSet rs1 = db.getData(questionView);
                 Default.setText(findCategoryName(item.getValue()));
                 try {
-                    while (rs1.next()){
-                        addQuestion question1=new addQuestion(rs1.getString("categoryID"),rs1.getString("questionID"),rs1.getString("questionText"),rs1.getString("questionImage"),rs1.getDouble("questionMark"),new Button("Edit"));
+                    while (rs1.next()) {
+                        addQuestion question1 = new addQuestion(rs1.getString("categoryID"), rs1.getString("questionID"), rs1.getString("questionText"), rs1.getString("questionImage"), rs1.getDouble("questionMark"), new Button("Edit"));
                         questionsList.add(question1);
                     }
-                    question.setCellValueFactory(new PropertyValueFactory<addQuestion,String>("questionText"));
-                    action.setCellValueFactory(new PropertyValueFactory<addQuestion,Button>("button"));
+                    question.setCellValueFactory(new PropertyValueFactory<addQuestion, String>("questionText"));
+                    action.setCellValueFactory(new PropertyValueFactory<addQuestion, Button>("button"));
                     table.setItems(questionsList);
                     table.setVisible(true);
-                }catch (Exception e){
+                } catch (Exception e) {
                     throw new RuntimeException(e);
                 }
             }
@@ -219,41 +252,39 @@
         gui2_1CheckBox.setSelected(false);
         if (gui2_1CheckBox.isSelected()) {
             showQuestionInCaseShowQuestionOfSubcategories();
-        }
-        else {
+        } else {
             showQuestionsOfCategoryWithoutSubcategories();
         }
         gui2_1CheckBox.setOnAction(event -> {
             if (gui2_1CheckBox.isSelected()) {
-              showQuestionInCaseShowQuestionOfSubcategories();
-            }
-            else {
+                showQuestionInCaseShowQuestionOfSubcategories();
+            } else {
                 showQuestionsOfCategoryWithoutSubcategories();
             }
         });
         gui2_1.setOnMouseClicked(mouseEvent -> {
-            if(category.isVisible()&& isMouseOnLabel(Default,mouseEvent)==false)category.setVisible(false);
+            if (category.isVisible() && isMouseOnLabel(Default, mouseEvent) == false) category.setVisible(false);
         });
         categoriesButton.setOnAction(e -> {
-            Stage stage = (Stage)((Node) e.getSource()).getScene().getWindow();
+            Stage stage = (Stage) ((Node) e.getSource()).getScene().getWindow();
             FXMLLoader loader = new FXMLLoader();
             loader.setLocation(getClass().getResource("/com/example/baitaplonoop/GUI33AddCategory.fxml"));
             try {
-                Parent GUI33AddCategory=loader.load();
-                Scene scene=new Scene(GUI33AddCategory);
+                Parent GUI33AddCategory = loader.load();
+                Scene scene = new Scene(GUI33AddCategory);
                 stage.setScene(scene);
             } catch (IOException ex) {
                 throw new RuntimeException(ex);
             }
 
         });
-      importButton.setOnAction(e -> {
-            Stage stage = (Stage)((Node) e.getSource()).getScene().getWindow();
+        importButton.setOnAction(e -> {
+            Stage stage = (Stage) ((Node) e.getSource()).getScene().getWindow();
             FXMLLoader loader = new FXMLLoader();
             loader.setLocation(getClass().getResource("/com/example/baitaplonoop/GUI34.fxml"));
             try {
-                Parent GUI33AddCategory=loader.load();
-                Scene scene=new Scene(GUI33AddCategory);
+                Parent GUI33AddCategory = loader.load();
+                Scene scene = new Scene(GUI33AddCategory);
                 stage.setScene(scene);
             } catch (IOException ex) {
                 throw new RuntimeException(ex);
Index: src/main/resources/com/example/baitaplonoop/GUI21.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.geometry.*?>\r\n<?import javafx.scene.text.*?>\r\n<?import java.lang.*?>\r\n<?import java.util.*?>\r\n<?import javafx.scene.*?>\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.layout.*?>\r\n\r\n<AnchorPane fx:id=\"gui2_1\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"645.0\" prefWidth=\"740.0\" xmlns=\"http://javafx.com/javafx/8\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.example.baitaplonoop.controller.GUI21Controller\">\r\n    <children>\r\n        <Label layoutX=\"-1.0\" layoutY=\"-1.0\" style=\"-fx-background-color: #00CED1;\" AnchorPane.leftAnchor=\"0.0\" AnchorPane.rightAnchor=\"0.0\" AnchorPane.topAnchor=\"0.0\" />\r\n        <Label layoutX=\"35.0\" layoutY=\"38.0\" text=\"IT\" textFill=\"#c61c1c\" AnchorPane.leftAnchor=\"87.0\" AnchorPane.rightAnchor=\"544.0\" AnchorPane.topAnchor=\"38.0\">\r\n            <font>\r\n                <Font size=\"26.0\" />\r\n            </font>\r\n        </Label>\r\n        <Button layoutX=\"26.0\" layoutY=\"92.0\" mnemonicParsing=\"false\" text=\"Home\" textFill=\"#e10606\" />\r\n        <Button layoutX=\"113.0\" layoutY=\"92.0\" mnemonicParsing=\"false\" text=\"My courses\" />\r\n        <Button layoutX=\"219.0\" layoutY=\"92.0\" mnemonicParsing=\"false\" text=\"Thi cuối Kỳ\" textFill=\"#cd1414\" />\r\n        <Label layoutX=\"22.0\" layoutY=\"189.0\" text=\"Question bank\" textFill=\"#d00b0b\" AnchorPane.leftAnchor=\"100.0\" AnchorPane.rightAnchor=\"352.0\">\r\n            <font>\r\n                <Font size=\"23.0\" />\r\n            </font>\r\n        </Label>\r\n        <Label layoutX=\"21.0\" layoutY=\"233.0\" text=\"Select a category:\">\r\n            <font>\r\n                <Font size=\"17.0\" />\r\n            </font>\r\n        </Label>\r\n        <Label layoutX=\"24.0\" layoutY=\"269.0\" text=\"The default category for questions shared in context\" />\r\n        <Button layoutX=\"35.0\" layoutY=\"362.0\" mnemonicParsing=\"false\" style=\"-fx-background-color: #00BFFF;\" text=\"CREATE A NEW QUESTION...\" />\r\n        <CheckBox fx:id=\"gui2_1CheckBox\" layoutX=\"23.0\" layoutY=\"304.0\" mnemonicParsing=\"false\" text=\"Also show questions from subcategories\" />\r\n        <CheckBox layoutX=\"23.0\" layoutY=\"333.0\" mnemonicParsing=\"false\" text=\"Also show old questions\" />\r\n        <TreeView fx:id=\"category\" layoutX=\"376.0\" layoutY=\"218.0\" prefHeight=\"178.0\" prefWidth=\"217.0\" AnchorPane.leftAnchor=\"376.0\" AnchorPane.rightAnchor=\"7.0\" />\r\n        <ToolBar fx:id=\"toolBar\" layoutX=\"26.0\" layoutY=\"131.0\" prefHeight=\"45.0\" prefWidth=\"357.0\">\r\n         <items>\r\n            <ToggleButton fx:id=\"questionsButton\" mnemonicParsing=\"false\" text=\"Questions\" />\r\n            <ToggleButton fx:id=\"categoriesButton\" mnemonicParsing=\"false\" text=\"Categories\" />\r\n            <ToggleButton fx:id=\"importButton\" mnemonicParsing=\"false\" text=\"Import\" />\r\n            <ToggleButton fx:id=\"exportButton\" mnemonicParsing=\"false\" text=\"Export\" />\r\n         </items>\r\n        </ToolBar>\r\n        <Label fx:id=\"Default\" layoutX=\"375.0\" layoutY=\"196.0\" prefHeight=\"21.0\" prefWidth=\"120.0\" text=\"Default\" textAlignment=\"CENTER\" />\r\n      <TableView fx:id=\"table\" layoutX=\"53.0\" layoutY=\"402.0\" prefHeight=\"200.0\" prefWidth=\"619.0\">\r\n        <columns>\r\n          <TableColumn fx:id=\"question\" prefWidth=\"539.0\" text=\"Question\" />\r\n          <TableColumn fx:id=\"action\" prefWidth=\"78.0\" text=\"Action\" />\r\n        </columns>\r\n      </TableView>\r\n    </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/baitaplonoop/GUI21.fxml b/src/main/resources/com/example/baitaplonoop/GUI21.fxml
--- a/src/main/resources/com/example/baitaplonoop/GUI21.fxml	
+++ b/src/main/resources/com/example/baitaplonoop/GUI21.fxml	
@@ -1,14 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import javafx.geometry.*?>
-<?import javafx.scene.text.*?>
-<?import java.lang.*?>
-<?import java.util.*?>
-<?import javafx.scene.*?>
-<?import javafx.scene.control.*?>
-<?import javafx.scene.layout.*?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.CheckBox?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TableColumn?>
+<?import javafx.scene.control.TableView?>
+<?import javafx.scene.control.ToggleButton?>
+<?import javafx.scene.control.ToolBar?>
+<?import javafx.scene.control.TreeView?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.text.Font?>
 
-<AnchorPane fx:id="gui2_1" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="645.0" prefWidth="740.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.baitaplonoop.controller.GUI21Controller">
+<AnchorPane fx:id="gui2_1" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="645.0" prefWidth="740.0" xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.baitaplonoop.controller.GUI21Controller">
     <children>
         <Label layoutX="-1.0" layoutY="-1.0" style="-fx-background-color: #00CED1;" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
         <Label layoutX="35.0" layoutY="38.0" text="IT" textFill="#c61c1c" AnchorPane.leftAnchor="87.0" AnchorPane.rightAnchor="544.0" AnchorPane.topAnchor="38.0">
@@ -45,8 +48,8 @@
         <Label fx:id="Default" layoutX="375.0" layoutY="196.0" prefHeight="21.0" prefWidth="120.0" text="Default" textAlignment="CENTER" />
       <TableView fx:id="table" layoutX="53.0" layoutY="402.0" prefHeight="200.0" prefWidth="619.0">
         <columns>
-          <TableColumn fx:id="question" prefWidth="539.0" text="Question" />
-          <TableColumn fx:id="action" prefWidth="78.0" text="Action" />
+          <TableColumn fx:id="question" prefWidth="575.9999694824219" text="Question" />
+          <TableColumn fx:id="action" prefWidth="42.0" text="Action" />
         </columns>
       </TableView>
     </children>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_20\" default=\"true\" project-jdk-name=\"19\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" default="true" project-jdk-name="19" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="19" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/com/example/baitaplonoop/test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.baitaplonoop;\r\n\r\nimport com.example.baitaplonoop.sql.DBConnect;\r\nimport org.apache.poi.ss.usermodel.Picture;\r\nimport org.apache.poi.xwpf.extractor.XWPFWordExtractor;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.*;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class test {\r\n    public static void main(String[] args) {\r\n//        try{\r\n//            FileInputStream fis = new FileInputStream(\"C:/Users/HOANGPHUC/Desktop/thuPOI.docx\");\r\n//            XWPFDocument doc = new XWPFDocument(fis);\r\n//            List<XWPFParagraph> paragraphs = doc.getParagraphs();\r\n////            XWPFWordExtractor extractor = new XWPFWordExtractor(doc);\r\n////            String paragraph = extractor.getText();\r\n////            String part[] = paragraph.split(\"\\n\");\r\n////            for(int i = 0; i< part.length; i++){\r\n////                System.out.println(part[i] + \" \" + paragraphs.get(i).getText());\r\n////            }\r\n//            for(XWPFParagraph p : paragraphs){\r\n//                List<XWPFRun> runs = p.getRuns();\r\n//                if(runs != null){\r\n//                    for(XWPFRun r : runs){\r\n//                        List<XWPFPicture> listPic = r.getEmbeddedPictures();\r\n//                        if(listPic != null && listPic.size() != 0){\r\n//                            for(XWPFPicture pic : listPic){\r\n//                                XWPFPictureData data = pic.getPictureData();\r\n//                                byte[] bytepic = data.getData();\r\n//                                BufferedImage imag = ImageIO.read(new ByteArrayInputStream(bytepic));\r\n//                                ImageIO.write(imag, \"png\", new File(\"D:/Image/\" + data.getFileName()));\r\n//                            }\r\n//                        }\r\n//                    }\r\n//                }\r\n//            }\r\n//        } catch (FileNotFoundException e) {\r\n//            throw new RuntimeException(e);\r\n//        } catch (IOException e) {\r\n//            throw new RuntimeException(e);\r\n//        }\r\n        DBConnect db = new DBConnect();\r\n        try {\r\n            ResultSet rs = db.getData(\"Select questionImage from Question\");\r\n            while(rs.next()){\r\n                InputStream is = rs.getBinaryStream(1);\r\n                if(is == null){\r\n                    continue;\r\n                }\r\n                FileOutputStream os = new FileOutputStream(new File(\"D:/Image/photo.png\"));\r\n                byte[] contents = new byte[1024];\r\n                int size = 0;\r\n                while((size = is.read(contents)) != -1){\r\n                    os.write(contents,0, size);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (FileNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n//        try {\r\n//            FileInputStream fis = new FileInputStream(\"C:/Users/HOANGPHUC/Desktop/thuPOI.docx\");\r\n//            XWPFDocument doc = new XWPFDocument(fis);\r\n//            List<XWPFPictureData> picList = doc.getAllPictures();\r\n//            Iterator<XWPFPictureData> iterator = picList.iterator();\r\n//            while(iterator.hasNext()){\r\n//                XWPFPictureData pic = iterator.next();\r\n//                byte[] bytepic = pic.getData();\r\n//                BufferedImage imag = ImageIO.read(new ByteArrayInputStream(bytepic));\r\n//                ImageIO.write(imag, \"png\", new File(\"D:/Image/\" + pic.getFileName()));\r\n//            }\r\n//        } catch (FileNotFoundException e) {\r\n//            throw new RuntimeException(e);\r\n//        } catch (IOException e) {\r\n//            throw new RuntimeException(e);\r\n//        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/baitaplonoop/test.java b/src/main/java/com/example/baitaplonoop/test.java
--- a/src/main/java/com/example/baitaplonoop/test.java	
+++ b/src/main/java/com/example/baitaplonoop/test.java	
@@ -51,9 +51,9 @@
         DBConnect db = new DBConnect();
         try {
             ResultSet rs = db.getData("Select questionImage from Question");
-            while(rs.next()){
+            while (rs.next()) {
                 InputStream is = rs.getBinaryStream(1);
-                if(is == null){
+                if (is == null) {
                     continue;
                 }
                 FileOutputStream os = new FileOutputStream(new File("D:/Image/photo.png"));
